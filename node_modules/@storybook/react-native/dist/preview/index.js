'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _urlParse = require('url-parse');

var _urlParse2 = _interopRequireDefault(_urlParse);

var _addons = require('@storybook/addons');

var _addons2 = _interopRequireDefault(_addons);

var _channelWebsocket = require('@storybook/channel-websocket');

var _channelWebsocket2 = _interopRequireDefault(_channelWebsocket);

var _events = require('events');

var _client = require('@storybook/core/client');

var _OnDeviceUI = require('./components/OnDeviceUI');

var _OnDeviceUI2 = _interopRequireDefault(_OnDeviceUI);

var _StoryView = require('./components/StoryView');

var _StoryView2 = _interopRequireDefault(_StoryView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Preview = function () {
  function Preview() {
    var _this = this;

    (0, _classCallCheck3.default)(this, Preview);

    this._addons = {};
    this._decorators = [];
    this._events = new _events.EventEmitter();
    this._stories = new _client.StoryStore();
    this._clientApi = new _client.ClientApi({ storyStore: this._stories });

    ['storiesOf', 'setAddon', 'addDecorator', 'clearDecorators', 'getStorybook'].forEach(function (method) {
      _this[method] = _this._clientApi[method].bind(_this._clientApi);
    });
  }

  (0, _createClass3.default)(Preview, [{
    key: 'configure',
    value: function configure(loadStories, module) {
      var _this2 = this;

      loadStories();
      if (module && module.hot) {
        module.hot.accept(function () {
          return _this2._sendSetStories();
        });
        // TODO remove all global decorators on dispose
      }
    }
  }, {
    key: 'getStorybookUI',
    value: function getStorybookUI() {
      var _this3 = this;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return function () {
        var webUrl = null;
        var channel = null;

        try {
          channel = _addons2.default.getChannel();
        } catch (e) {
          // getChannel throws if the channel is not defined,
          // which is fine in this case (we will define it below)
        }

        if (params.resetStorybook || !channel) {
          var host = params.host || (0, _urlParse2.default)(_reactNative.NativeModules.SourceCode.scriptURL).hostname;
          var port = params.port !== false ? ':' + (params.port || 7007) : '';

          var query = params.query || '';
          var secured = params.secured;

          var websocketType = secured ? 'wss' : 'ws';
          var httpType = secured ? 'https' : 'http';

          var url = websocketType + '://' + host + port + '/' + query;
          webUrl = httpType + '://' + host + port;
          channel = (0, _channelWebsocket2.default)({ url: url });
          _addons2.default.setChannel(channel);

          channel.emit('channelCreated');
        }
        channel.on('getStories', function () {
          return _this3._sendSetStories();
        });
        channel.on('setCurrentStory', function (d) {
          return _this3._selectStory(d);
        });
        _this3._events.on('setCurrentStory', function (d) {
          return _this3._selectStory(d);
        });
        _this3._sendSetStories();
        _this3._sendGetCurrentStory();

        // finally return the preview component
        return params.onDeviceUI ? _react2.default.createElement(_OnDeviceUI2.default, { stories: _this3._stories, events: _this3._events, url: webUrl }) : _react2.default.createElement(_StoryView2.default, { url: webUrl, events: _this3._events });
      };
    }
  }, {
    key: '_sendSetStories',
    value: function _sendSetStories() {
      var channel = _addons2.default.getChannel();
      var stories = this._stories.dumpStoryBook();
      channel.emit('setStories', { stories: stories });
    }
  }, {
    key: '_sendGetCurrentStory',
    value: function _sendGetCurrentStory() {
      var channel = _addons2.default.getChannel();
      channel.emit('getCurrentStory');
    }
  }, {
    key: '_selectStory',
    value: function _selectStory(selection) {
      var kind = selection.kind,
          story = selection.story;

      var storyFn = this._stories.getStory(kind, story);
      this._events.emit('story', storyFn, selection);
    }
  }]);
  return Preview;
}(); /* eslint no-underscore-dangle: 0 */

exports.default = Preview;